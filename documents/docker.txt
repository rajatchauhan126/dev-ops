"Docker docs" 
-----------------------------------------Introduction-------------------------------
Docker is a full development platform for creating containerized apps,


-----------------------------------------Installation-------------------------------

--Open official website of docker 
    --https://www.docker.com/get-started

--download for windows
    --Requires Microsoft Windows 10 Professional or Enterprise 64-bit. For previous versions get Docker Toolbox.

--------AWS Installation
--https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html#install_docker

---------commands
--docker run -d busybox:1.24 sleep 1000
--docker ps
--docker run --rm busybox:1.24 sleep 1
--docker ps -a //to list all the container
--docker run --name hello_world busybox:1.24 //specify which image to run
--docker ps -a

-------low level of docker image
-- docker run -d busybox:1.24 sleep 100//detach mode
-- docker inspect "cf269eefe56ec0c3a171ffbc40355fdd5b1c83382efdbf63265283dc08bbbe7c"//the ip address and mac address etc

---------docker port mapping and docker logs commands-----
-- tomcat image that execute java servlet

-- go to tomcat page //offical site


---------------------------------------Build Docker images by docker commit command--------
Note : type sudo su whenever commands are not executing, and exit command to come out of container

step 1 : go to docker hub, search debian.
step 2 : there are list of images there, we will use jessie image.
step 3 : go to putty, -> type sudo su 
step 4 : docker run -it debain:jessie
step 5 : ls
stpe 6 : type git, will get error
step 7 : apt-get update && apt-get install git
step 8 : type git, now it will show help option
step 9 : docker ps -a//docker commit command would save the changes we made to the docker container's file system to a new image.
step 10 :docker commit dockerid dockerhub repository name:1.00 //return id of new image and tags
    //base image is debian and extended image is my username
step 11 : docker images
step 12 :  docker run -it Repository:1.00     //repository you just created
step 13 : ls //to see the folder strcture.


---------------------






----------------------------------------Basic commands------------------------------
--Installation steps link : https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04

-------------------------Build docker images by writing dockerfile------------
-- touch Dockerfile //without any extension
-- vi Dockerfile
-- 
    FROM debian:jessie //from base image, we will use debian jessie 
    RUN apt-get update //command to execute
    RUN apt -get install -y git
    RUN apt-get install -y vim

--save the file and exit 

-- docker build -t jameslee/debain . //docker build will build file using the docker file

-- docker images

----------------------------Best practice to write Docker file-----------------
-- will work with old Dockerfile
            FROM debian:jessie //from base image, we will use debian jessie 
    RUN apt-get update //command to execute
    RUN apt -get install -y git
    RUN apt-get install -y vim

--change to one line only
            FROM debian:jessie //from base image, we will use debian jessie 
    RUN apt-get update && apt -get install -y git && apt-get install -y vim

or

RUN apt-get update && apt -get install -y \ 
    git \ 
    vim

-- continue with the same file and append

CMD ["echo", "Hello world"]

--docker cache--
    if old image has not change, then it will take the copy of old image from cache
    and load from cache only. this will improve the performance

 1) chain instruction
 2) invalidate cache-- --no-cache=true
    docker build -t jameslee/debain . --no-cache=true


--copy container, copy a file to the constructor

FROM debain:jessie
RUN apt-get update && apt-get install -y \
    git \
    vim
COPY abc.txt /src/abc.txt

--save and exit
--rebuild the image, using docker  build -t jameslee/debain .
--docker run -it imagename
--check in src folder

Add instrunction
--all to download from internet and copy to container.
--ability to automatically unpack compressed files.
--copy is preferred over add.
--try to use copy.

------------------Push images to docker hub---------
--go to docker hub, login

--push a image
    docker_hub id / repository name  //id - username ,

-- docker images
-- docker tag imageid username/debain //imageid choose from image list

--latest tag -- default tag when no tag is provided, not work in reality just a convension
    avoid using latest tag.

-- docker images
-- docker login --username=jleetutorial //push to docker hub
-- docker push jleetutorial/debain:1:01 //1:01 = docker tag

----------containerize hello_world container----------
//using flask image for example

// create a folder, then create two files Dockerfile and app.py
// write below code in app

FROM flask import Flask 
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, world!'

if __name__ == '__main__':
    app.run(host='0.0.0.0')

//save and exit

//write the below code in Dockerfile

FROM python:3.5
RUN pip install Flask=-0.11.1
RUN useradd -ms /bin/bash admin
USER admin
WORKDIR /app
COPY app /app
CMD ["python", "app.py"]

//save and exit

-- docker build -t dockerapp:v0.1 .
-- docker images
-- docker run -d -p 5000:5000 //-d to run in background, -p for 

//access the python server, for linux

-- docker-machine ls //give the ip
-- open browser ip:5000

-----------login into container-------
-- docker exec -it containerid bash  //login as admin user

-- ps axu 








